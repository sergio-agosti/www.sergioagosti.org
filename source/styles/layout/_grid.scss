/**
 * This is a fully responsive grid
 *
 * - fluid
 * - nestable
 * - responsive
 *      - by default, you'll have s (small), m (medium), l (large) and x (extralarge) grids
 *      - by default, you'll have 2 to 12 columns grids
 * - optional vertical gutter
 *
 * formula: min-width: 318 * cols + 16
 */
$grid-breakpoints: (
    's' 'only screen and (max-width: 714px)',
    'm' 'only screen and (min-width: 715px) and (max-width: 970px)',
    'l' 'only screen and (min-width: 971px) and (max-width: 1288px)',
    'x' 'only screen and (min-width: 1289px) and (max-width: 1606px)',
    'h' 'only screen and (min-width: 1607px)'
) !default;
$grid-columns: 1 2 3 4 5 6 7 8 9 10 11 12 !default;
$grid-is-semantic: false !default;
$grid-gutter: $base-rhythm-unit * 3 !default;

/**
 * general usage
 *
 * .l-grid is the grid container
 * .l-grid-A--B-C is a column with a ratio of B:C for the A size grid
 *      e.g. .l-grid-m--1-3 is a column of 1:3 (one third) for the m size grid
 * .l-grid-A--skip--B-C is a column with B on C empty space before for the A size grid
 * .l-grid-A--pull--B-C is a column shifted of B on C on the left for the A size grid
 * .l-grid-A--push--B-C is a column shifted of B on C on the right for the A size grid
 * .l-grid-A--newrow is a first line column for the A size grid
 *      this ensures the column starts on a new line
 * .l-grid-A--center is a centered column
 *      this column will be the only one of its row
 *
 * Markup example:
 *
 
<grid-container class="l-grid">
    <grid-column class="l-grid-l--1-3 l-grid-x--1-5"></grid-column>
    <grid-column class="l-grid-l--2-3 l-grid-x--2-5"></grid-column>
    <grid-column class="l-grid-l--1-2 l-grid-l--newrow l-grid-x--2-5"></grid-column>
    <grid-column class="l-grid-l--1-2 l-grid-x--newrow"></grid-column>
    ...
</grid-container>

 *
 * grid with gutter (defined in $grid-gutter)
 
<grid-container class="l-grid l-grid--gutter">
    ...

 * semantic markup/style example
 *
 * HTML 
 
<main>
    <article></article>
    <aside></aside>
</main>
 
 *
 * SASS
 
main {
    @extend %l-grid;
}
main > article {
    @extend %l-grid-m--1-2;
    @extend %l-grid-l--2-3;
    @extend %l-grid-x--3-4;
}
main > aside {
    @extend %l-grid-m--1-2;
    @extend %l-grid-l--1-3;
    @extend %l-grid-x--1-4;
}
// grid with gutter (no need to @extend %l-grid as well)
main {
    @extend %l-grid--gutter;
}

 *
 */

// grid class type: this allows the use as a 'traditional' or 'silent' class
$grid-ct: if($grid-is-semantic, unquote("%"), unquote("."));


// define the style of the grid components
#{$grid-ct}l-grid {
    @include clearfix;
    > * {
        float: left;
    }
}
#{$grid-ct}l-grid--inline {
    display: inline-block;
    vertical-align: bottom;
}
#{$grid-ct}l-grid--gutter {
    @extend #{$grid-ct}l-grid;
    margin-left: -1 * $grid-gutter * 1px;
    > * {
        @include box-sizing(border-box);
        padding-left: $grid-gutter * 1px;
    }
}
#{$grid-ct}l-grid--gutter--half {
    @extend #{$grid-ct}l-grid;
    margin-left: -.5 * $grid-gutter * 1px;
    > * {
        @include box-sizing(border-box);
        padding-left: .5 * $grid-gutter * 1px;
    }
}
#{$grid-ct}l-grid--gutter--inline {
    @extend #{$grid-ct}l-grid;
    margin-left: -0.31em;
    > * {
        @include box-sizing(border-box);
        padding-left: 0.31em;
    }
}

@mixin _grid-generate($grid-breakpoint-size) {
    // generates the elements for each grid size
    @each $i in $grid-columns {
        // generates the elements for this grid size
        $j: 1;
        @while $j <= $i {
        
            $ratio: percentage($j/$i);
            
            #{$grid-ct}l-grid-#{$grid-breakpoint-size}--#{$j}-#{$i} {
                width: $ratio;
            }
            #{$grid-ct}l-grid-#{$grid-breakpoint-size}--skip--#{$j}-#{$i} {
                margin-left: $ratio;
            }
            #{$grid-ct}l-grid-#{$grid-breakpoint-size}--pull--#{$j}-#{$i} {
                position: relative;
                right: $ratio;
            }
            #{$grid-ct}l-grid-#{$grid-breakpoint-size}--push--#{$j}-#{$i} {
                position: relative;
                left: $ratio;
            }
            
            $j: $j + 1;
        }
    }
    // this is the first column of a row
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--newrow {
        clear: both;
    }
    // this is the last column of a row
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--endrow {
        + * {
            clear: both;
        }
    }
    // this column is centered
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--center {
        float: none;
        clear: both;
        margin: {
            left: auto;
            right: auto;
        }
    }
    // this column is removed
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--hidden {
        display: none;
    }
    // this column is floating the opposite way
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--revdir {
        float: right;
    }
    // this column is floating the opposite way
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--nowrap {
        white-space: nowrap;
    }
    // the content of this column is left-align
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--text-left {
        text-align: left;
    }
    // the content of this column is center-align
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--text-center {
        text-align: center;
    }
    // the content of this column is right-align
    #{$grid-ct}l-grid-#{$grid-breakpoint-size}--text-right {
        text-align: right;
    }
}

// this will notify JavaScript for changes on the grid layout when resizing the browser's window
// see http://css-tricks.com/media-query-change-detection-in-javascript-through-css-animations/
#{$grid-ct}l-grid--notify-js {
    @include animation-duration(1ms);
}

// define the grids for each breakpoint
@each $grid-breakpoint in $grid-breakpoints {

    $grid-breakpoint-size: nth($grid-breakpoint, 1);
    $grid-breakpoint-rule: nth($grid-breakpoint, 2);
    $grid-breakpoint-anim: 'l-grid-media--' + $grid-breakpoint-size;
    
    /**
     * This will notify JavaScript for changes on the grid layout when resizing the browser's window
     *
     * See http://css-tricks.com/media-query-change-detection-in-javascript-through-css-animations/
     */
    @include keyframes($grid-breakpoint-anim) {
        from { clip: rect(1px, auto, auto, auto); }
        to   { clip: rect(0px, auto, auto, auto); }
    }
    
    @media #{nth($grid-breakpoint, 2)} {
        @include _grid-generate($grid-breakpoint-size);
        #{$grid-ct}l-grid--notify-js {
            @include animation-name($grid-breakpoint-anim);
        }
    }
}

// define the grids outside breakpoint
@include _grid-generate('all');

/**
 * defines a grid container
 *
 * @param $grid-options some options for the grid (for example, gutter)
 */
@mixin grid($grid-options...) {
    @if length($grid-options) > 0 {
        @each $option in $grid-options {
            @extend #{$grid-ct}l-grid--#{$grid-options};
        }
    } @else {
        @extend #{$grid-ct}l-grid;
    }
}
/**
 * defines a grid column
 *
 * @param $grid-media-size the size of the media for this column
 * @param $grid-column the column definition in the form A B, where A is the width of the column and B is the number of columns
 *      e.g. 1 3 for a 1:3 (one third) column
 * @param $grid-options optional options for the column
 *      e.g. newrow, skip 1 5, pull 2 3, center
 */
@mixin grid-column($grid-media-size, $grid-column, $grid-options...) {
    @each $option in $grid-options {
        @if length($option) == 3 {
            @extend #{$grid-ct}l-grid-#{$grid-media-size}--#{nth($option, 1)}--#{nth($option, 2)}-#{nth($option, 3)};
        } @else {
            @extend #{$grid-ct}l-grid-#{$grid-media-size}--#{$option};
        }
    }
    @extend #{$grid-ct}l-grid-#{$grid-media-size}--#{nth($grid-column, 1)}-#{nth($grid-column, 2)};
}
