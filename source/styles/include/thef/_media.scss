$media-breakpoints: (
    's'    '(max-width: 500px)',
    'm'    '(min-width: 501px) and (max-width: 850px)',
    'm-up' '(min-width: 501px)',
    'm-to' '(max-width: 850px)',
    'l'    '(min-width: 851px) and (max-width: 1300px)',
    'l-up' '(min-width: 851px)',
    'l-to' '(max-width: 1300px)',
    'x'    '(min-width: 1301px)'
) !default;

//**
//* media: wraps some rules into a media query
//*
//* e.g.
//*
//* SASS source
//
// .module {
//     color: red;
//     @include thef-media(m) {
//         color: blue;
//     }
//     @include thef-media(l) {
//         color: green;
//     }
// }
//
//* CSS generated
//
// .module {
//     color: red;
// }
// @media only screen and (min-width: 501px) {
//     .module {
//         color: blue;
//     }
// }
// @media only screen and (min-width: 851px) {
//     .module {
//         color: green;
//     }
// }
// 
//*/
@mixin thef-media($media-size) {
    @each $media-breakpoint in $media-breakpoints {
        @if nth($media-breakpoint, 1) == $media-size {
            @media #{nth($media-breakpoint, 2)} {
                @content;
            }
        }
    }
}
//**
//* Generates classes for all the defined breakpoints.
//* You can optionally avoid generating the global one.
//*/
@mixin thef-media-generate($selector, $generate-base: true) {
    @if ($generate-base) {
        #{$selector} {
            @content;
        }
    }
    @each $media-breakpoint in $media-breakpoints {
        @media #{nth($media-breakpoint, 2)} {
            #{$selector}--#{nth($media-breakpoint, 1)} {
                @content;
            }
        }
    }
}